<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (C) 2025 tekBlueprint, Sergey Grachev <sergey.grachev@yahoo.com>
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<tekSoftwareLibrary group="mapping" artifact="mapstruct" version="1.5">

    <name>MapStruct</name>
    <tags>mapping, object-mapper, java, annotation-processing, code-generator</tags>
    <website>https://mapstruct.org</website>
    <description>
        MapStruct is a code generator that simplifies the implementation of mappings between Java bean types based on a
        convention over configuration approach.
        It generates type-safe bean mappers at compile time, which avoids runtime errors and improves performance
        compared to reflection-based mapping frameworks.
        MapStruct supports various features such as custom methods, nested object mappings, and collection handling.
    </description>

    <license name="Apache License 2.0" holder="jenawant."
             url="https://github.com/jenawant/smpp/blob/main/LICENSE"
             commercialUse="true" type="PERMISSIVE"/>

    <features>
        <feature name="Type-Safe Mappings">
            Generates compile-time type-safe mappers, reducing runtime errors.
        </feature>
        <feature name="Convention Over Configuration">
            MapStruct follows a convention over configuration approach to simplify the mapping process.
            This means that you can often define mappings without explicitly configuring each field.
        </feature>
    </features>

</tekSoftwareLibrary>