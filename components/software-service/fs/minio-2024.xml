<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (C) 2025 tekBlueprint, Sergey Grachev <sergey.grachev@yahoo.com>
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<tekSoftwareService group="fs" artifact="minio" version="2024">

    <name>MinIO Object Storage</name>
    <tags>object storage, distributed, scalable, S3 compatible</tags>
    <website>https://min.io</website>
    <metrics>cpu, mem, net, data, rps, iops</metrics>
    <description>
        MinIO is a high-performance, distributed object storage system that is S3 API compatible.
        It is designed to be easy to deploy, manage, and scale. MinIO provides a simple and
        efficient way to store and retrieve large amounts of unstructured data, such as images,
        videos, and documents.
    </description>

    <license name="GNU Affero General Public License v3.0" holder="MinIO, Inc"
             url="https://github.com/minio/minio/blob/master/LICENSE"
             commercialUse="true" type="COPYLEFT"/>

    <properties/>

    <software>
        <services>
            <service id="main" server="main">
                <hardware>
                    <processor threads="2"/>
                    <memory capacity="512MiB"/>
                    <storage capacity="1GiB" iops="150"/>
                    <network bandwidth="10Mbs"/>
                </hardware>
                <endpoints>
                    <endpoint type="table"/>
                </endpoints>
            </service>
        </services>
    </software>

    <simulation>
        <stages>
            <on-setup>
                <setup-service ref="main"/>
            </on-setup>

            <on-endpoint-out>
                <add-metric id="rps">statistics.probeRequestsPerSecond</add-metric>
                <endpoint type="http">
                    <add-metric id="net">statistics.probeBytesPerSecond</add-metric>
                    <add-metric id="cpu">statistics.probeComputePerSecond</add-metric>
                    <add-metric id="mem">statistics.probeMemoryPerSecond</add-metric>
                </endpoint>
            </on-endpoint-out>

            <on-endpoint-in>
                <add-metric id="rps">statistics.probeRequestsPerSecond</add-metric>
                <endpoint type="http">
                    <add-metric id="net">statistics.probeBytesPerSecond</add-metric>
                    <add-metric id="cpu">statistics.probeComputePerSecond</add-metric>
                    <add-metric id="mem">statistics.probeMemoryPerSecond</add-metric>
                    <add-metric id="iops">statistics.probeBytesPerSecond / 4096</add-metric>
                </endpoint>
            </on-endpoint-in>
        </stages>
    </simulation>

</tekSoftwareService>